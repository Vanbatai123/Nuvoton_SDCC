                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module N76_I2C
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _timeOut
                                     12 	.globl _xRamInc
                                     13 	.globl _xRamWrite
                                     14 	.globl _xRamRead
                                     15 	.globl __delay_us
                                     16 	.globl _eiph1
                                     17 	.globl _eip1
                                     18 	.globl _pmd
                                     19 	.globl _pmen
                                     20 	.globl _pdtcnt
                                     21 	.globl _pdten
                                     22 	.globl _scon_1
                                     23 	.globl _eiph
                                     24 	.globl _aindids
                                     25 	.globl _spdr
                                     26 	.globl _spsr
                                     27 	.globl _spcr2
                                     28 	.globl _spcr
                                     29 	.globl _capcon4
                                     30 	.globl _capcon3
                                     31 	.globl _b
                                     32 	.globl _eip
                                     33 	.globl _c2h
                                     34 	.globl _c2l
                                     35 	.globl _pif
                                     36 	.globl _pipen
                                     37 	.globl _pinen
                                     38 	.globl _picon
                                     39 	.globl _adccon0
                                     40 	.globl _c1h
                                     41 	.globl _c1l
                                     42 	.globl _c0h
                                     43 	.globl _c0l
                                     44 	.globl _adcdly
                                     45 	.globl _adccon2
                                     46 	.globl _adccon1
                                     47 	.globl _acc
                                     48 	.globl _pwmcon1
                                     49 	.globl _piocon0
                                     50 	.globl _pwm3l
                                     51 	.globl _pwm2l
                                     52 	.globl _pwm1l
                                     53 	.globl _pwm0l
                                     54 	.globl _pwmpl
                                     55 	.globl _pwmcon0
                                     56 	.globl _fbd
                                     57 	.globl _pnp
                                     58 	.globl _pwm3h
                                     59 	.globl _pwm2h
                                     60 	.globl _pwm1h
                                     61 	.globl _pwm0h
                                     62 	.globl _pwmph
                                     63 	.globl _psw
                                     64 	.globl _adcmph
                                     65 	.globl _adcmpl
                                     66 	.globl _pwm5l
                                     67 	.globl _th2
                                     68 	.globl _pwm4l
                                     69 	.globl _tl2
                                     70 	.globl _rcmp2h
                                     71 	.globl _rcmp2l
                                     72 	.globl _t2mod
                                     73 	.globl _t2con
                                     74 	.globl _ta
                                     75 	.globl _piocon1
                                     76 	.globl _rh3
                                     77 	.globl _pwm5h
                                     78 	.globl _rl3
                                     79 	.globl _pwm4h
                                     80 	.globl _t3con
                                     81 	.globl _adcrh
                                     82 	.globl _adcrl
                                     83 	.globl _i2addr
                                     84 	.globl _i2con
                                     85 	.globl _i2toc
                                     86 	.globl _i2clk
                                     87 	.globl _i2stat
                                     88 	.globl _i2dat
                                     89 	.globl _saddr_1
                                     90 	.globl _saden_1
                                     91 	.globl _saden
                                     92 	.globl _ip
                                     93 	.globl _pwmintc
                                     94 	.globl _iph
                                     95 	.globl _p2s
                                     96 	.globl _p1sr
                                     97 	.globl _p1m2
                                     98 	.globl _p1s
                                     99 	.globl _p1m1
                                    100 	.globl _p0sr
                                    101 	.globl _p0m2
                                    102 	.globl _p0s
                                    103 	.globl _p0m1
                                    104 	.globl _p3
                                    105 	.globl _iapcn
                                    106 	.globl _iapfd
                                    107 	.globl _p3sr
                                    108 	.globl _p3m2
                                    109 	.globl _p3s
                                    110 	.globl _p3m1
                                    111 	.globl _bodcon1
                                    112 	.globl _wdcon
                                    113 	.globl _saddr
                                    114 	.globl _ie
                                    115 	.globl _iapah
                                    116 	.globl _iapal
                                    117 	.globl _iapuen
                                    118 	.globl _iaptrg
                                    119 	.globl _bodcon0
                                    120 	.globl _auxr1
                                    121 	.globl _p2
                                    122 	.globl _chpcon
                                    123 	.globl _eie1
                                    124 	.globl _eie
                                    125 	.globl _sbuf_1
                                    126 	.globl _sbuf
                                    127 	.globl _scon
                                    128 	.globl _cken
                                    129 	.globl _ckswt
                                    130 	.globl _ckdiv
                                    131 	.globl _capcon2
                                    132 	.globl _capcon1
                                    133 	.globl _capcon0
                                    134 	.globl _sfrs
                                    135 	.globl _p1
                                    136 	.globl _wkcon
                                    137 	.globl _ckcon
                                    138 	.globl _th1
                                    139 	.globl _th0
                                    140 	.globl _tl1
                                    141 	.globl _tl0
                                    142 	.globl _tmod
                                    143 	.globl _tcon
                                    144 	.globl _pcon
                                    145 	.globl _rwk
                                    146 	.globl _rctrim1
                                    147 	.globl _rctrim0
                                    148 	.globl _dph
                                    149 	.globl _dpl
                                    150 	.globl _sp
                                    151 	.globl _p0
                                    152 	.globl _I2C_requestFrom_PARM_2
                                    153 	.globl _I2C_writeBuffer_PARM_2
                                    154 	.globl _t
                                    155 	.globl _I2C_begin
                                    156 	.globl _I2C_beginTransmission
                                    157 	.globl _I2C_write
                                    158 	.globl _I2C_writeBuffer
                                    159 	.globl _I2C_endTransmission
                                    160 	.globl _I2C_requestFrom
                                    161 	.globl _I2C_read
                                    162 	.globl _I2C_available
                                    163 ;--------------------------------------------------------
                                    164 ; special function registers
                                    165 ;--------------------------------------------------------
                                    166 	.area RSEG    (ABS,DATA)
      000000                        167 	.org 0x0000
                           000080   168 _p0	=	0x0080
                           000081   169 _sp	=	0x0081
                           000082   170 _dpl	=	0x0082
                           000083   171 _dph	=	0x0083
                           000084   172 _rctrim0	=	0x0084
                           000085   173 _rctrim1	=	0x0085
                           000086   174 _rwk	=	0x0086
                           000087   175 _pcon	=	0x0087
                           000088   176 _tcon	=	0x0088
                           000089   177 _tmod	=	0x0089
                           00008A   178 _tl0	=	0x008a
                           00008B   179 _tl1	=	0x008b
                           00008C   180 _th0	=	0x008c
                           00008D   181 _th1	=	0x008d
                           00008E   182 _ckcon	=	0x008e
                           00008F   183 _wkcon	=	0x008f
                           000090   184 _p1	=	0x0090
                           000091   185 _sfrs	=	0x0091
                           000092   186 _capcon0	=	0x0092
                           000093   187 _capcon1	=	0x0093
                           000094   188 _capcon2	=	0x0094
                           000095   189 _ckdiv	=	0x0095
                           000096   190 _ckswt	=	0x0096
                           000097   191 _cken	=	0x0097
                           000098   192 _scon	=	0x0098
                           000099   193 _sbuf	=	0x0099
                           00009A   194 _sbuf_1	=	0x009a
                           00009B   195 _eie	=	0x009b
                           00009C   196 _eie1	=	0x009c
                           00009F   197 _chpcon	=	0x009f
                           0000A0   198 _p2	=	0x00a0
                           0000A2   199 _auxr1	=	0x00a2
                           0000A3   200 _bodcon0	=	0x00a3
                           0000A4   201 _iaptrg	=	0x00a4
                           0000A5   202 _iapuen	=	0x00a5
                           0000A6   203 _iapal	=	0x00a6
                           0000A7   204 _iapah	=	0x00a7
                           0000A8   205 _ie	=	0x00a8
                           0000A9   206 _saddr	=	0x00a9
                           0000AA   207 _wdcon	=	0x00aa
                           0000AB   208 _bodcon1	=	0x00ab
                           0000AC   209 _p3m1	=	0x00ac
                           0000AC   210 _p3s	=	0x00ac
                           0000AD   211 _p3m2	=	0x00ad
                           0000AD   212 _p3sr	=	0x00ad
                           0000AE   213 _iapfd	=	0x00ae
                           0000AF   214 _iapcn	=	0x00af
                           0000B0   215 _p3	=	0x00b0
                           0000B1   216 _p0m1	=	0x00b1
                           0000B1   217 _p0s	=	0x00b1
                           0000B2   218 _p0m2	=	0x00b2
                           0000B2   219 _p0sr	=	0x00b2
                           0000B3   220 _p1m1	=	0x00b3
                           0000B3   221 _p1s	=	0x00b3
                           0000B4   222 _p1m2	=	0x00b4
                           0000B4   223 _p1sr	=	0x00b4
                           0000B5   224 _p2s	=	0x00b5
                           0000B7   225 _iph	=	0x00b7
                           0000B7   226 _pwmintc	=	0x00b7
                           0000B8   227 _ip	=	0x00b8
                           0000B9   228 _saden	=	0x00b9
                           0000BA   229 _saden_1	=	0x00ba
                           0000BB   230 _saddr_1	=	0x00bb
                           0000BC   231 _i2dat	=	0x00bc
                           0000BD   232 _i2stat	=	0x00bd
                           0000BE   233 _i2clk	=	0x00be
                           0000BF   234 _i2toc	=	0x00bf
                           0000C0   235 _i2con	=	0x00c0
                           0000C1   236 _i2addr	=	0x00c1
                           0000C2   237 _adcrl	=	0x00c2
                           0000C3   238 _adcrh	=	0x00c3
                           0000C4   239 _t3con	=	0x00c4
                           0000C4   240 _pwm4h	=	0x00c4
                           0000C5   241 _rl3	=	0x00c5
                           0000C5   242 _pwm5h	=	0x00c5
                           0000C6   243 _rh3	=	0x00c6
                           0000C6   244 _piocon1	=	0x00c6
                           0000C7   245 _ta	=	0x00c7
                           0000C8   246 _t2con	=	0x00c8
                           0000C9   247 _t2mod	=	0x00c9
                           0000CA   248 _rcmp2l	=	0x00ca
                           0000CB   249 _rcmp2h	=	0x00cb
                           0000CC   250 _tl2	=	0x00cc
                           0000CC   251 _pwm4l	=	0x00cc
                           0000CD   252 _th2	=	0x00cd
                           0000CD   253 _pwm5l	=	0x00cd
                           0000CE   254 _adcmpl	=	0x00ce
                           0000CF   255 _adcmph	=	0x00cf
                           0000D0   256 _psw	=	0x00d0
                           0000D1   257 _pwmph	=	0x00d1
                           0000D2   258 _pwm0h	=	0x00d2
                           0000D3   259 _pwm1h	=	0x00d3
                           0000D4   260 _pwm2h	=	0x00d4
                           0000D5   261 _pwm3h	=	0x00d5
                           0000D6   262 _pnp	=	0x00d6
                           0000D7   263 _fbd	=	0x00d7
                           0000D8   264 _pwmcon0	=	0x00d8
                           0000D9   265 _pwmpl	=	0x00d9
                           0000DA   266 _pwm0l	=	0x00da
                           0000DB   267 _pwm1l	=	0x00db
                           0000DC   268 _pwm2l	=	0x00dc
                           0000DD   269 _pwm3l	=	0x00dd
                           0000DE   270 _piocon0	=	0x00de
                           0000DF   271 _pwmcon1	=	0x00df
                           0000E0   272 _acc	=	0x00e0
                           0000E1   273 _adccon1	=	0x00e1
                           0000E2   274 _adccon2	=	0x00e2
                           0000E3   275 _adcdly	=	0x00e3
                           0000E4   276 _c0l	=	0x00e4
                           0000E5   277 _c0h	=	0x00e5
                           0000E6   278 _c1l	=	0x00e6
                           0000E7   279 _c1h	=	0x00e7
                           0000E8   280 _adccon0	=	0x00e8
                           0000E9   281 _picon	=	0x00e9
                           0000EA   282 _pinen	=	0x00ea
                           0000EB   283 _pipen	=	0x00eb
                           0000EC   284 _pif	=	0x00ec
                           0000ED   285 _c2l	=	0x00ed
                           0000EE   286 _c2h	=	0x00ee
                           0000EF   287 _eip	=	0x00ef
                           0000F0   288 _b	=	0x00f0
                           0000F1   289 _capcon3	=	0x00f1
                           0000F2   290 _capcon4	=	0x00f2
                           0000F3   291 _spcr	=	0x00f3
                           0000F3   292 _spcr2	=	0x00f3
                           0000F4   293 _spsr	=	0x00f4
                           0000F5   294 _spdr	=	0x00f5
                           0000F6   295 _aindids	=	0x00f6
                           0000F7   296 _eiph	=	0x00f7
                           0000F8   297 _scon_1	=	0x00f8
                           0000F9   298 _pdten	=	0x00f9
                           0000FA   299 _pdtcnt	=	0x00fa
                           0000FB   300 _pmen	=	0x00fb
                           0000FC   301 _pmd	=	0x00fc
                           0000FE   302 _eip1	=	0x00fe
                           0000FF   303 _eiph1	=	0x00ff
                                    304 ;--------------------------------------------------------
                                    305 ; special function bits
                                    306 ;--------------------------------------------------------
                                    307 	.area RSEG    (ABS,DATA)
      000000                        308 	.org 0x0000
                                    309 ;--------------------------------------------------------
                                    310 ; overlayable register banks
                                    311 ;--------------------------------------------------------
                                    312 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        313 	.ds 8
                                    314 ;--------------------------------------------------------
                                    315 ; internal ram data
                                    316 ;--------------------------------------------------------
                                    317 	.area DSEG    (DATA)
      00001C                        318 _t::
      00001C                        319 	.ds 1
      00001D                        320 _I2C_writeBuffer_PARM_2:
      00001D                        321 	.ds 1
      00001E                        322 _I2C_requestFrom_PARM_2:
      00001E                        323 	.ds 1
                                    324 ;--------------------------------------------------------
                                    325 ; overlayable items in internal ram
                                    326 ;--------------------------------------------------------
                                    327 ;--------------------------------------------------------
                                    328 ; indirectly addressable internal ram data
                                    329 ;--------------------------------------------------------
                                    330 	.area ISEG    (DATA)
                                    331 ;--------------------------------------------------------
                                    332 ; absolute internal ram data
                                    333 ;--------------------------------------------------------
                                    334 	.area IABS    (ABS,DATA)
                                    335 	.area IABS    (ABS,DATA)
                                    336 ;--------------------------------------------------------
                                    337 ; bit data
                                    338 ;--------------------------------------------------------
                                    339 	.area BSEG    (BIT)
                                    340 ;--------------------------------------------------------
                                    341 ; paged external ram data
                                    342 ;--------------------------------------------------------
                                    343 	.area PSEG    (PAG,XDATA)
                                    344 ;--------------------------------------------------------
                                    345 ; external ram data
                                    346 ;--------------------------------------------------------
                                    347 	.area XSEG    (XDATA)
                                    348 ;--------------------------------------------------------
                                    349 ; absolute external ram data
                                    350 ;--------------------------------------------------------
                                    351 	.area XABS    (ABS,XDATA)
                                    352 ;--------------------------------------------------------
                                    353 ; external initialized ram data
                                    354 ;--------------------------------------------------------
                                    355 	.area XISEG   (XDATA)
                                    356 	.area HOME    (CODE)
                                    357 	.area GSINIT0 (CODE)
                                    358 	.area GSINIT1 (CODE)
                                    359 	.area GSINIT2 (CODE)
                                    360 	.area GSINIT3 (CODE)
                                    361 	.area GSINIT4 (CODE)
                                    362 	.area GSINIT5 (CODE)
                                    363 	.area GSINIT  (CODE)
                                    364 	.area GSFINAL (CODE)
                                    365 	.area CSEG    (CODE)
                                    366 ;--------------------------------------------------------
                                    367 ; global & static initialisations
                                    368 ;--------------------------------------------------------
                                    369 	.area HOME    (CODE)
                                    370 	.area GSINIT  (CODE)
                                    371 	.area GSFINAL (CODE)
                                    372 	.area GSINIT  (CODE)
                                    373 ;	./src/N76_I2C.c:10: uint8_t t = 0;
      00005F 75 1C 00         [24]  374 	mov	_t,#0x00
                                    375 ;--------------------------------------------------------
                                    376 ; Home
                                    377 ;--------------------------------------------------------
                                    378 	.area HOME    (CODE)
                                    379 	.area HOME    (CODE)
                                    380 ;--------------------------------------------------------
                                    381 ; code
                                    382 ;--------------------------------------------------------
                                    383 	.area CSEG    (CODE)
                                    384 ;------------------------------------------------------------
                                    385 ;Allocation info for local variables in function 'timeOut'
                                    386 ;------------------------------------------------------------
                                    387 ;	./src/N76_I2C.c:20: uint8_t timeOut(void)
                                    388 ;	-----------------------------------------
                                    389 ;	 function timeOut
                                    390 ;	-----------------------------------------
      0002BF                        391 _timeOut:
                           000007   392 	ar7 = 0x07
                           000006   393 	ar6 = 0x06
                           000005   394 	ar5 = 0x05
                           000004   395 	ar4 = 0x04
                           000003   396 	ar3 = 0x03
                           000002   397 	ar2 = 0x02
                           000001   398 	ar1 = 0x01
                           000000   399 	ar0 = 0x00
                                    400 ;	./src/N76_I2C.c:22: _delay_us(100);
      0002BF 90 00 64         [24]  401 	mov	dptr,#(0x64&0x00ff)
      0002C2 E4               [12]  402 	clr	a
      0002C3 F5 F0            [12]  403 	mov	b,a
      0002C5 12 06 C0         [24]  404 	lcall	__delay_us
                                    405 ;	./src/N76_I2C.c:23: if (++t > 10)
      0002C8 05 1C            [12]  406 	inc	_t
      0002CA E5 1C            [12]  407 	mov	a,_t
      0002CC 24 F5            [12]  408 	add	a,#0xff - 0x0a
      0002CE 50 04            [24]  409 	jnc	00102$
                                    410 ;	./src/N76_I2C.c:24: return 1;
      0002D0 75 82 01         [24]  411 	mov	dpl,#0x01
      0002D3 22               [24]  412 	ret
      0002D4                        413 00102$:
                                    414 ;	./src/N76_I2C.c:25: return 0;
      0002D4 75 82 00         [24]  415 	mov	dpl,#0x00
                                    416 ;	./src/N76_I2C.c:26: }
      0002D7 22               [24]  417 	ret
                                    418 ;------------------------------------------------------------
                                    419 ;Allocation info for local variables in function 'I2C_begin'
                                    420 ;------------------------------------------------------------
                                    421 ;	./src/N76_I2C.c:28: void I2C_begin()
                                    422 ;	-----------------------------------------
                                    423 ;	 function I2C_begin
                                    424 ;	-----------------------------------------
      0002D8                        425 _I2C_begin:
                                    426 ;	./src/N76_I2C.c:30: setb(P1M1, 3); // set P1.3 as open drain
      0002D8 43 B3 08         [24]  427 	orl	_p1m1,#0x08
                                    428 ;	./src/N76_I2C.c:31: setb(P1M2, 3);
      0002DB 43 B4 08         [24]  429 	orl	_p1m2,#0x08
                                    430 ;	./src/N76_I2C.c:32: setb(P1M1, 4); // set P1.4 as open drain
      0002DE 43 B3 10         [24]  431 	orl	_p1m1,#0x10
                                    432 ;	./src/N76_I2C.c:33: setb(P1M2, 4);
      0002E1 43 B4 10         [24]  433 	orl	_p1m2,#0x10
                                    434 ;	./src/N76_I2C.c:36: I2CLK = I2C_CLOCK; // I2C clock = Fsys/(4*(I2CLK+1))
      0002E4 75 BE 27         [24]  435 	mov	_i2clk,#0x27
                                    436 ;	./src/N76_I2C.c:39: setb(I2CON, I2CEN); // set_I2CEN;
      0002E7 43 C0 40         [24]  437 	orl	_i2con,#0x40
                                    438 ;	./src/N76_I2C.c:40: }
      0002EA 22               [24]  439 	ret
                                    440 ;------------------------------------------------------------
                                    441 ;Allocation info for local variables in function 'I2C_beginTransmission'
                                    442 ;------------------------------------------------------------
                                    443 ;addr                      Allocated to registers r7 
                                    444 ;------------------------------------------------------------
                                    445 ;	./src/N76_I2C.c:42: uint8_t I2C_beginTransmission(uint8_t addr)
                                    446 ;	-----------------------------------------
                                    447 ;	 function I2C_beginTransmission
                                    448 ;	-----------------------------------------
      0002EB                        449 _I2C_beginTransmission:
      0002EB AF 82            [24]  450 	mov	r7,dpl
                                    451 ;	./src/N76_I2C.c:44: xRamWrite(XRAM_I2C_TX_IDX, 0);
      0002ED 75 69 00         [24]  452 	mov	_xRamWrite_PARM_2,#0x00
      0002F0 90 02 BC         [24]  453 	mov	dptr,#0x02bc
      0002F3 C0 07            [24]  454 	push	ar7
      0002F5 12 07 18         [24]  455 	lcall	_xRamWrite
                                    456 ;	./src/N76_I2C.c:45: xRamWrite(XRAM_I2C_TX_LEN, 0);
      0002F8 75 69 00         [24]  457 	mov	_xRamWrite_PARM_2,#0x00
      0002FB 90 02 BD         [24]  458 	mov	dptr,#0x02bd
      0002FE 12 07 18         [24]  459 	lcall	_xRamWrite
      000301 D0 07            [24]  460 	pop	ar7
                                    461 ;	./src/N76_I2C.c:54: setb(I2CON, STA);
      000303 43 C0 20         [24]  462 	orl	_i2con,#0x20
                                    463 ;	./src/N76_I2C.c:55: clrb(I2CON, SI);
      000306 53 C0 F7         [24]  464 	anl	_i2con,#0xf7
                                    465 ;	./src/N76_I2C.c:57: t = 0;
      000309 75 1C 00         [24]  466 	mov	_t,#0x00
                                    467 ;	./src/N76_I2C.c:59: while (inbit(I2CON, SI) == 0)
      00030C                        468 00103$:
      00030C 74 08            [12]  469 	mov	a,#0x08
      00030E 55 C0            [12]  470 	anl	a,_i2con
      000310 C4               [12]  471 	swap	a
      000311 23               [12]  472 	rl	a
      000312 54 1F            [12]  473 	anl	a,#0x1f
      000314 FE               [12]  474 	mov	r6,a
      000315 70 0F            [24]  475 	jnz	00105$
                                    476 ;	./src/N76_I2C.c:60: if (timeOut())
      000317 C0 07            [24]  477 	push	ar7
      000319 12 02 BF         [24]  478 	lcall	_timeOut
      00031C E5 82            [12]  479 	mov	a,dpl
      00031E D0 07            [24]  480 	pop	ar7
      000320 60 EA            [24]  481 	jz	00103$
                                    482 ;	./src/N76_I2C.c:61: return 2;
      000322 75 82 02         [24]  483 	mov	dpl,#0x02
      000325 22               [24]  484 	ret
      000326                        485 00105$:
                                    486 ;	./src/N76_I2C.c:65: I2DAT = (addr << 1) | I2C_WRITE;
      000326 EF               [12]  487 	mov	a,r7
      000327 2F               [12]  488 	add	a,r7
      000328 F5 BC            [12]  489 	mov	_i2dat,a
                                    490 ;	./src/N76_I2C.c:67: t = 0;
      00032A 75 1C 00         [24]  491 	mov	_t,#0x00
                                    492 ;	./src/N76_I2C.c:69: clrb(I2CON, STA);
      00032D 53 C0 DF         [24]  493 	anl	_i2con,#0xdf
                                    494 ;	./src/N76_I2C.c:70: clrb(I2CON, SI);
      000330 53 C0 F7         [24]  495 	anl	_i2con,#0xf7
                                    496 ;	./src/N76_I2C.c:71: while (inbit(I2CON, SI) == 0)
      000333                        497 00108$:
      000333 74 08            [12]  498 	mov	a,#0x08
      000335 55 C0            [12]  499 	anl	a,_i2con
      000337 C4               [12]  500 	swap	a
      000338 23               [12]  501 	rl	a
      000339 54 1F            [12]  502 	anl	a,#0x1f
      00033B 70 0B            [24]  503 	jnz	00110$
                                    504 ;	./src/N76_I2C.c:72: if (timeOut())
      00033D 12 02 BF         [24]  505 	lcall	_timeOut
      000340 E5 82            [12]  506 	mov	a,dpl
      000342 60 EF            [24]  507 	jz	00108$
                                    508 ;	./src/N76_I2C.c:73: return 3;
      000344 75 82 03         [24]  509 	mov	dpl,#0x03
      000347 22               [24]  510 	ret
      000348                        511 00110$:
                                    512 ;	./src/N76_I2C.c:75: return 0;
      000348 75 82 00         [24]  513 	mov	dpl,#0x00
                                    514 ;	./src/N76_I2C.c:76: }
      00034B 22               [24]  515 	ret
                                    516 ;------------------------------------------------------------
                                    517 ;Allocation info for local variables in function 'I2C_write'
                                    518 ;------------------------------------------------------------
                                    519 ;data                      Allocated to registers r7 
                                    520 ;------------------------------------------------------------
                                    521 ;	./src/N76_I2C.c:78: void I2C_write(uint8_t data)
                                    522 ;	-----------------------------------------
                                    523 ;	 function I2C_write
                                    524 ;	-----------------------------------------
      00034C                        525 _I2C_write:
      00034C AF 82            [24]  526 	mov	r7,dpl
                                    527 ;	./src/N76_I2C.c:81: xRamWrite(xRamRead(XRAM_I2C_TX_IDX)+XRAM_I2C_TX_BUFF,data);
      00034E 90 02 BC         [24]  528 	mov	dptr,#0x02bc
      000351 C0 07            [24]  529 	push	ar7
      000353 12 07 14         [24]  530 	lcall	_xRamRead
      000356 AE 82            [24]  531 	mov	r6,dpl
      000358 D0 07            [24]  532 	pop	ar7
      00035A 7D 00            [12]  533 	mov	r5,#0x00
      00035C 74 C0            [12]  534 	mov	a,#0xc0
      00035E 2E               [12]  535 	add	a,r6
      00035F FE               [12]  536 	mov	r6,a
      000360 74 02            [12]  537 	mov	a,#0x02
      000362 3D               [12]  538 	addc	a,r5
      000363 FD               [12]  539 	mov	r5,a
      000364 8E 82            [24]  540 	mov	dpl,r6
      000366 8D 83            [24]  541 	mov	dph,r5
      000368 8F 69            [24]  542 	mov	_xRamWrite_PARM_2,r7
      00036A 12 07 18         [24]  543 	lcall	_xRamWrite
                                    544 ;	./src/N76_I2C.c:82: xRamInc(XRAM_I2C_TX_IDX);
      00036D 90 02 BC         [24]  545 	mov	dptr,#0x02bc
      000370 12 07 1C         [24]  546 	lcall	_xRamInc
                                    547 ;	./src/N76_I2C.c:83: xRamWrite(XRAM_I2C_TX_LEN, xRamRead(XRAM_I2C_TX_IDX));
      000373 90 02 BC         [24]  548 	mov	dptr,#0x02bc
      000376 12 07 14         [24]  549 	lcall	_xRamRead
      000379 85 82 69         [24]  550 	mov	_xRamWrite_PARM_2,dpl
      00037C 90 02 BD         [24]  551 	mov	dptr,#0x02bd
                                    552 ;	./src/N76_I2C.c:84: }
      00037F 02 07 18         [24]  553 	ljmp	_xRamWrite
                                    554 ;------------------------------------------------------------
                                    555 ;Allocation info for local variables in function 'I2C_writeBuffer'
                                    556 ;------------------------------------------------------------
                                    557 ;len                       Allocated with name '_I2C_writeBuffer_PARM_2'
                                    558 ;data                      Allocated to registers r5 r6 r7 
                                    559 ;i                         Allocated to registers r4 
                                    560 ;------------------------------------------------------------
                                    561 ;	./src/N76_I2C.c:86: void I2C_writeBuffer(uint8_t *data, uint8_t len)
                                    562 ;	-----------------------------------------
                                    563 ;	 function I2C_writeBuffer
                                    564 ;	-----------------------------------------
      000382                        565 _I2C_writeBuffer:
      000382 AD 82            [24]  566 	mov	r5,dpl
      000384 AE 83            [24]  567 	mov	r6,dph
      000386 AF F0            [24]  568 	mov	r7,b
                                    569 ;	./src/N76_I2C.c:88: uint8_t i = 0;
      000388 7C 00            [12]  570 	mov	r4,#0x00
      00038A                        571 00103$:
                                    572 ;	./src/N76_I2C.c:89: for (; i < len; ++i)
      00038A C3               [12]  573 	clr	c
      00038B EC               [12]  574 	mov	a,r4
      00038C 95 1D            [12]  575 	subb	a,_I2C_writeBuffer_PARM_2
      00038E 50 29            [24]  576 	jnc	00105$
                                    577 ;	./src/N76_I2C.c:91: I2C_write(data[i]);
      000390 EC               [12]  578 	mov	a,r4
      000391 2D               [12]  579 	add	a,r5
      000392 F9               [12]  580 	mov	r1,a
      000393 E4               [12]  581 	clr	a
      000394 3E               [12]  582 	addc	a,r6
      000395 FA               [12]  583 	mov	r2,a
      000396 8F 03            [24]  584 	mov	ar3,r7
      000398 89 82            [24]  585 	mov	dpl,r1
      00039A 8A 83            [24]  586 	mov	dph,r2
      00039C 8B F0            [24]  587 	mov	b,r3
      00039E 12 10 22         [24]  588 	lcall	__gptrget
      0003A1 F5 82            [12]  589 	mov	dpl,a
      0003A3 C0 07            [24]  590 	push	ar7
      0003A5 C0 06            [24]  591 	push	ar6
      0003A7 C0 05            [24]  592 	push	ar5
      0003A9 C0 04            [24]  593 	push	ar4
      0003AB 12 03 4C         [24]  594 	lcall	_I2C_write
      0003AE D0 04            [24]  595 	pop	ar4
      0003B0 D0 05            [24]  596 	pop	ar5
      0003B2 D0 06            [24]  597 	pop	ar6
      0003B4 D0 07            [24]  598 	pop	ar7
                                    599 ;	./src/N76_I2C.c:89: for (; i < len; ++i)
      0003B6 0C               [12]  600 	inc	r4
      0003B7 80 D1            [24]  601 	sjmp	00103$
      0003B9                        602 00105$:
                                    603 ;	./src/N76_I2C.c:93: }
      0003B9 22               [24]  604 	ret
                                    605 ;------------------------------------------------------------
                                    606 ;Allocation info for local variables in function 'I2C_endTransmission'
                                    607 ;------------------------------------------------------------
                                    608 ;i                         Allocated to registers r7 
                                    609 ;------------------------------------------------------------
                                    610 ;	./src/N76_I2C.c:95: uint8_t I2C_endTransmission(void)
                                    611 ;	-----------------------------------------
                                    612 ;	 function I2C_endTransmission
                                    613 ;	-----------------------------------------
      0003BA                        614 _I2C_endTransmission:
                                    615 ;	./src/N76_I2C.c:99: for (i = 0; i < xRamRead(XRAM_I2C_TX_LEN); ++i)
      0003BA 7F 00            [12]  616 	mov	r7,#0x00
      0003BC                        617 00113$:
      0003BC 90 02 BD         [24]  618 	mov	dptr,#0x02bd
      0003BF C0 07            [24]  619 	push	ar7
      0003C1 12 07 14         [24]  620 	lcall	_xRamRead
      0003C4 AE 82            [24]  621 	mov	r6,dpl
      0003C6 D0 07            [24]  622 	pop	ar7
      0003C8 C3               [12]  623 	clr	c
      0003C9 EF               [12]  624 	mov	a,r7
      0003CA 9E               [12]  625 	subb	a,r6
      0003CB 50 40            [24]  626 	jnc	00106$
                                    627 ;	./src/N76_I2C.c:103: I2DAT = xRamRead(XRAM_I2C_TX_BUFF+i);
      0003CD 8F 05            [24]  628 	mov	ar5,r7
      0003CF 7E 00            [12]  629 	mov	r6,#0x00
      0003D1 74 C0            [12]  630 	mov	a,#0xc0
      0003D3 2D               [12]  631 	add	a,r5
      0003D4 FD               [12]  632 	mov	r5,a
      0003D5 74 02            [12]  633 	mov	a,#0x02
      0003D7 3E               [12]  634 	addc	a,r6
      0003D8 FE               [12]  635 	mov	r6,a
      0003D9 8D 82            [24]  636 	mov	dpl,r5
      0003DB 8E 83            [24]  637 	mov	dph,r6
      0003DD C0 07            [24]  638 	push	ar7
      0003DF 12 07 14         [24]  639 	lcall	_xRamRead
      0003E2 85 82 BC         [24]  640 	mov	_i2dat,dpl
      0003E5 D0 07            [24]  641 	pop	ar7
                                    642 ;	./src/N76_I2C.c:106: t = 0;
      0003E7 75 1C 00         [24]  643 	mov	_t,#0x00
                                    644 ;	./src/N76_I2C.c:107: clrb(I2CON, STA);
      0003EA 53 C0 DF         [24]  645 	anl	_i2con,#0xdf
                                    646 ;	./src/N76_I2C.c:108: clrb(I2CON, SI);
      0003ED 53 C0 F7         [24]  647 	anl	_i2con,#0xf7
                                    648 ;	./src/N76_I2C.c:109: while (inbit(I2CON, SI) == 0)
      0003F0                        649 00103$:
      0003F0 74 08            [12]  650 	mov	a,#0x08
      0003F2 55 C0            [12]  651 	anl	a,_i2con
      0003F4 C4               [12]  652 	swap	a
      0003F5 23               [12]  653 	rl	a
      0003F6 54 1F            [12]  654 	anl	a,#0x1f
      0003F8 FE               [12]  655 	mov	r6,a
      0003F9 70 0F            [24]  656 	jnz	00114$
                                    657 ;	./src/N76_I2C.c:110: if (timeOut())
      0003FB C0 07            [24]  658 	push	ar7
      0003FD 12 02 BF         [24]  659 	lcall	_timeOut
      000400 E5 82            [12]  660 	mov	a,dpl
      000402 D0 07            [24]  661 	pop	ar7
      000404 60 EA            [24]  662 	jz	00103$
                                    663 ;	./src/N76_I2C.c:111: return 1;
      000406 75 82 01         [24]  664 	mov	dpl,#0x01
      000409 22               [24]  665 	ret
      00040A                        666 00114$:
                                    667 ;	./src/N76_I2C.c:99: for (i = 0; i < xRamRead(XRAM_I2C_TX_LEN); ++i)
      00040A 0F               [12]  668 	inc	r7
      00040B 80 AF            [24]  669 	sjmp	00113$
      00040D                        670 00106$:
                                    671 ;	./src/N76_I2C.c:116: setb(I2CON, STO);
      00040D 43 C0 10         [24]  672 	orl	_i2con,#0x10
                                    673 ;	./src/N76_I2C.c:117: clrb(I2CON, SI);
      000410 53 C0 F7         [24]  674 	anl	_i2con,#0xf7
                                    675 ;	./src/N76_I2C.c:120: t = 0;
      000413 75 1C 00         [24]  676 	mov	_t,#0x00
                                    677 ;	./src/N76_I2C.c:121: while (inbit(I2CON, STO) == 1)
      000416                        678 00109$:
      000416 74 10            [12]  679 	mov	a,#0x10
      000418 55 C0            [12]  680 	anl	a,_i2con
      00041A C4               [12]  681 	swap	a
      00041B 54 0F            [12]  682 	anl	a,#0x0f
      00041D FF               [12]  683 	mov	r7,a
      00041E BF 01 0B         [24]  684 	cjne	r7,#0x01,00111$
                                    685 ;	./src/N76_I2C.c:122: if (timeOut())
      000421 12 02 BF         [24]  686 	lcall	_timeOut
      000424 E5 82            [12]  687 	mov	a,dpl
      000426 60 EE            [24]  688 	jz	00109$
                                    689 ;	./src/N76_I2C.c:123: return 3;
      000428 75 82 03         [24]  690 	mov	dpl,#0x03
      00042B 22               [24]  691 	ret
      00042C                        692 00111$:
                                    693 ;	./src/N76_I2C.c:129: return 0;
      00042C 75 82 00         [24]  694 	mov	dpl,#0x00
                                    695 ;	./src/N76_I2C.c:130: }
      00042F 22               [24]  696 	ret
                                    697 ;------------------------------------------------------------
                                    698 ;Allocation info for local variables in function 'I2C_requestFrom'
                                    699 ;------------------------------------------------------------
                                    700 ;len                       Allocated with name '_I2C_requestFrom_PARM_2'
                                    701 ;addr                      Allocated to registers r7 
                                    702 ;i                         Allocated to registers r7 
                                    703 ;------------------------------------------------------------
                                    704 ;	./src/N76_I2C.c:132: uint8_t I2C_requestFrom(uint8_t addr, uint8_t len)
                                    705 ;	-----------------------------------------
                                    706 ;	 function I2C_requestFrom
                                    707 ;	-----------------------------------------
      000430                        708 _I2C_requestFrom:
      000430 AF 82            [24]  709 	mov	r7,dpl
                                    710 ;	./src/N76_I2C.c:135: xRamWrite(XRAM_I2C_RX_LEN, len);
      000432 85 1E 69         [24]  711 	mov	_xRamWrite_PARM_2,_I2C_requestFrom_PARM_2
      000435 90 02 BF         [24]  712 	mov	dptr,#0x02bf
      000438 C0 07            [24]  713 	push	ar7
      00043A 12 07 18         [24]  714 	lcall	_xRamWrite
                                    715 ;	./src/N76_I2C.c:136: xRamWrite(XRAM_I2C_RX_IDX, 0);
      00043D 75 69 00         [24]  716 	mov	_xRamWrite_PARM_2,#0x00
      000440 90 02 BE         [24]  717 	mov	dptr,#0x02be
      000443 12 07 18         [24]  718 	lcall	_xRamWrite
      000446 D0 07            [24]  719 	pop	ar7
                                    720 ;	./src/N76_I2C.c:145: setb(I2CON, STA);
      000448 43 C0 20         [24]  721 	orl	_i2con,#0x20
                                    722 ;	./src/N76_I2C.c:146: clrb(I2CON, SI);
      00044B 53 C0 F7         [24]  723 	anl	_i2con,#0xf7
                                    724 ;	./src/N76_I2C.c:149: t = 0;
      00044E 75 1C 00         [24]  725 	mov	_t,#0x00
                                    726 ;	./src/N76_I2C.c:150: while (inbit(I2CON, SI) == 0)
      000451                        727 00103$:
      000451 74 08            [12]  728 	mov	a,#0x08
      000453 55 C0            [12]  729 	anl	a,_i2con
      000455 C4               [12]  730 	swap	a
      000456 23               [12]  731 	rl	a
      000457 54 1F            [12]  732 	anl	a,#0x1f
      000459 FE               [12]  733 	mov	r6,a
      00045A 70 0F            [24]  734 	jnz	00105$
                                    735 ;	./src/N76_I2C.c:151: if (timeOut())
      00045C C0 07            [24]  736 	push	ar7
      00045E 12 02 BF         [24]  737 	lcall	_timeOut
      000461 E5 82            [12]  738 	mov	a,dpl
      000463 D0 07            [24]  739 	pop	ar7
      000465 60 EA            [24]  740 	jz	00103$
                                    741 ;	./src/N76_I2C.c:152: return 2;
      000467 75 82 02         [24]  742 	mov	dpl,#0x02
      00046A 22               [24]  743 	ret
      00046B                        744 00105$:
                                    745 ;	./src/N76_I2C.c:155: I2DAT = (addr << 1) | I2C_READ;
      00046B EF               [12]  746 	mov	a,r7
      00046C 2F               [12]  747 	add	a,r7
      00046D FF               [12]  748 	mov	r7,a
      00046E 74 01            [12]  749 	mov	a,#0x01
      000470 4F               [12]  750 	orl	a,r7
      000471 F5 BC            [12]  751 	mov	_i2dat,a
                                    752 ;	./src/N76_I2C.c:156: clrb(I2CON, STA);
      000473 53 C0 DF         [24]  753 	anl	_i2con,#0xdf
                                    754 ;	./src/N76_I2C.c:157: clrb(I2CON, SI);
      000476 53 C0 F7         [24]  755 	anl	_i2con,#0xf7
                                    756 ;	./src/N76_I2C.c:160: t = 0;
      000479 75 1C 00         [24]  757 	mov	_t,#0x00
                                    758 ;	./src/N76_I2C.c:161: while (inbit(I2CON, SI) == 0)
      00047C                        759 00108$:
      00047C 74 08            [12]  760 	mov	a,#0x08
      00047E 55 C0            [12]  761 	anl	a,_i2con
      000480 C4               [12]  762 	swap	a
      000481 23               [12]  763 	rl	a
      000482 54 1F            [12]  764 	anl	a,#0x1f
      000484 70 0B            [24]  765 	jnz	00142$
                                    766 ;	./src/N76_I2C.c:162: if (timeOut())
      000486 12 02 BF         [24]  767 	lcall	_timeOut
      000489 E5 82            [12]  768 	mov	a,dpl
      00048B 60 EF            [24]  769 	jz	00108$
                                    770 ;	./src/N76_I2C.c:163: return 3;
      00048D 75 82 03         [24]  771 	mov	dpl,#0x03
      000490 22               [24]  772 	ret
                                    773 ;	./src/N76_I2C.c:166: for (i = 0; i < xRamRead(XRAM_I2C_RX_LEN) - 1; i++)
      000491                        774 00142$:
      000491 7F 00            [12]  775 	mov	r7,#0x00
      000493                        776 00128$:
      000493 90 02 BF         [24]  777 	mov	dptr,#0x02bf
      000496 C0 07            [24]  778 	push	ar7
      000498 12 07 14         [24]  779 	lcall	_xRamRead
      00049B AE 82            [24]  780 	mov	r6,dpl
      00049D D0 07            [24]  781 	pop	ar7
      00049F 7D 00            [12]  782 	mov	r5,#0x00
      0004A1 1E               [12]  783 	dec	r6
      0004A2 BE FF 01         [24]  784 	cjne	r6,#0xff,00204$
      0004A5 1D               [12]  785 	dec	r5
      0004A6                        786 00204$:
      0004A6 8F 03            [24]  787 	mov	ar3,r7
      0004A8 7C 00            [12]  788 	mov	r4,#0x00
      0004AA C3               [12]  789 	clr	c
      0004AB EB               [12]  790 	mov	a,r3
      0004AC 9E               [12]  791 	subb	a,r6
      0004AD EC               [12]  792 	mov	a,r4
      0004AE 64 80            [12]  793 	xrl	a,#0x80
      0004B0 8D F0            [24]  794 	mov	b,r5
      0004B2 63 F0 80         [24]  795 	xrl	b,#0x80
      0004B5 95 F0            [12]  796 	subb	a,b
      0004B7 50 3F            [24]  797 	jnc	00116$
                                    798 ;	./src/N76_I2C.c:170: setb(I2CON, AA);
      0004B9 43 C0 04         [24]  799 	orl	_i2con,#0x04
                                    800 ;	./src/N76_I2C.c:171: clrb(I2CON, SI);
      0004BC 53 C0 F7         [24]  801 	anl	_i2con,#0xf7
                                    802 ;	./src/N76_I2C.c:173: t = 0;
      0004BF 75 1C 00         [24]  803 	mov	_t,#0x00
                                    804 ;	./src/N76_I2C.c:174: while (inbit(I2CON, SI) == 0)
      0004C2                        805 00113$:
      0004C2 74 08            [12]  806 	mov	a,#0x08
      0004C4 55 C0            [12]  807 	anl	a,_i2con
      0004C6 C4               [12]  808 	swap	a
      0004C7 23               [12]  809 	rl	a
      0004C8 54 1F            [12]  810 	anl	a,#0x1f
      0004CA 70 0F            [24]  811 	jnz	00115$
                                    812 ;	./src/N76_I2C.c:175: if (timeOut())
      0004CC C0 07            [24]  813 	push	ar7
      0004CE 12 02 BF         [24]  814 	lcall	_timeOut
      0004D1 E5 82            [12]  815 	mov	a,dpl
      0004D3 D0 07            [24]  816 	pop	ar7
      0004D5 60 EB            [24]  817 	jz	00113$
                                    818 ;	./src/N76_I2C.c:176: return 4;
      0004D7 75 82 04         [24]  819 	mov	dpl,#0x04
      0004DA 22               [24]  820 	ret
      0004DB                        821 00115$:
                                    822 ;	./src/N76_I2C.c:178: xRamWrite(XRAM_I2C_RX_BUFF+i,I2DAT);
      0004DB 8F 05            [24]  823 	mov	ar5,r7
      0004DD 7E 00            [12]  824 	mov	r6,#0x00
      0004DF 74 E0            [12]  825 	mov	a,#0xe0
      0004E1 2D               [12]  826 	add	a,r5
      0004E2 FD               [12]  827 	mov	r5,a
      0004E3 74 02            [12]  828 	mov	a,#0x02
      0004E5 3E               [12]  829 	addc	a,r6
      0004E6 FE               [12]  830 	mov	r6,a
      0004E7 8D 82            [24]  831 	mov	dpl,r5
      0004E9 8E 83            [24]  832 	mov	dph,r6
      0004EB 85 BC 69         [24]  833 	mov	_xRamWrite_PARM_2,_i2dat
      0004EE C0 07            [24]  834 	push	ar7
      0004F0 12 07 18         [24]  835 	lcall	_xRamWrite
      0004F3 D0 07            [24]  836 	pop	ar7
                                    837 ;	./src/N76_I2C.c:166: for (i = 0; i < xRamRead(XRAM_I2C_RX_LEN) - 1; i++)
      0004F5 0F               [12]  838 	inc	r7
      0004F6 80 9B            [24]  839 	sjmp	00128$
      0004F8                        840 00116$:
                                    841 ;	./src/N76_I2C.c:182: clrb(I2CON, AA);
      0004F8 53 C0 FB         [24]  842 	anl	_i2con,#0xfb
                                    843 ;	./src/N76_I2C.c:183: clrb(I2CON, SI);
      0004FB 53 C0 F7         [24]  844 	anl	_i2con,#0xf7
                                    845 ;	./src/N76_I2C.c:185: t = 0;
      0004FE 75 1C 00         [24]  846 	mov	_t,#0x00
                                    847 ;	./src/N76_I2C.c:186: while (inbit(I2CON, SI) == 0)
      000501                        848 00119$:
      000501 74 08            [12]  849 	mov	a,#0x08
      000503 55 C0            [12]  850 	anl	a,_i2con
      000505 C4               [12]  851 	swap	a
      000506 23               [12]  852 	rl	a
      000507 54 1F            [12]  853 	anl	a,#0x1f
      000509 70 0B            [24]  854 	jnz	00121$
                                    855 ;	./src/N76_I2C.c:187: if (timeOut())
      00050B 12 02 BF         [24]  856 	lcall	_timeOut
      00050E E5 82            [12]  857 	mov	a,dpl
      000510 60 EF            [24]  858 	jz	00119$
                                    859 ;	./src/N76_I2C.c:188: return 5;
      000512 75 82 05         [24]  860 	mov	dpl,#0x05
      000515 22               [24]  861 	ret
      000516                        862 00121$:
                                    863 ;	./src/N76_I2C.c:190: xRamWrite(XRAM_I2C_RX_BUFF+xRamRead(XRAM_I2C_RX_LEN) - 1,I2DAT);
      000516 90 02 BF         [24]  864 	mov	dptr,#0x02bf
      000519 12 07 14         [24]  865 	lcall	_xRamRead
      00051C AF 82            [24]  866 	mov	r7,dpl
      00051E 7E 00            [12]  867 	mov	r6,#0x00
      000520 74 DF            [12]  868 	mov	a,#0xdf
      000522 2F               [12]  869 	add	a,r7
      000523 FF               [12]  870 	mov	r7,a
      000524 74 02            [12]  871 	mov	a,#0x02
      000526 3E               [12]  872 	addc	a,r6
      000527 FE               [12]  873 	mov	r6,a
      000528 8F 82            [24]  874 	mov	dpl,r7
      00052A 8E 83            [24]  875 	mov	dph,r6
      00052C 85 BC 69         [24]  876 	mov	_xRamWrite_PARM_2,_i2dat
      00052F 12 07 18         [24]  877 	lcall	_xRamWrite
                                    878 ;	./src/N76_I2C.c:193: setb(I2CON, STO);
      000532 43 C0 10         [24]  879 	orl	_i2con,#0x10
                                    880 ;	./src/N76_I2C.c:194: clrb(I2CON, SI);
      000535 53 C0 F7         [24]  881 	anl	_i2con,#0xf7
                                    882 ;	./src/N76_I2C.c:197: t = 0;
      000538 75 1C 00         [24]  883 	mov	_t,#0x00
                                    884 ;	./src/N76_I2C.c:198: while (inbit(I2CON, STO) == 1)
      00053B                        885 00124$:
      00053B 74 10            [12]  886 	mov	a,#0x10
      00053D 55 C0            [12]  887 	anl	a,_i2con
      00053F C4               [12]  888 	swap	a
      000540 54 0F            [12]  889 	anl	a,#0x0f
      000542 FF               [12]  890 	mov	r7,a
      000543 BF 01 0B         [24]  891 	cjne	r7,#0x01,00126$
                                    892 ;	./src/N76_I2C.c:199: if (timeOut())
      000546 12 02 BF         [24]  893 	lcall	_timeOut
      000549 E5 82            [12]  894 	mov	a,dpl
      00054B 60 EE            [24]  895 	jz	00124$
                                    896 ;	./src/N76_I2C.c:200: return 6;
      00054D 75 82 06         [24]  897 	mov	dpl,#0x06
      000550 22               [24]  898 	ret
      000551                        899 00126$:
                                    900 ;	./src/N76_I2C.c:205: return 0;
      000551 75 82 00         [24]  901 	mov	dpl,#0x00
                                    902 ;	./src/N76_I2C.c:206: }
      000554 22               [24]  903 	ret
                                    904 ;------------------------------------------------------------
                                    905 ;Allocation info for local variables in function 'I2C_read'
                                    906 ;------------------------------------------------------------
                                    907 ;value                     Allocated to registers r7 
                                    908 ;------------------------------------------------------------
                                    909 ;	./src/N76_I2C.c:208: uint8_t I2C_read(void)
                                    910 ;	-----------------------------------------
                                    911 ;	 function I2C_read
                                    912 ;	-----------------------------------------
      000555                        913 _I2C_read:
                                    914 ;	./src/N76_I2C.c:210: int8_t value = -1;
      000555 7F FF            [12]  915 	mov	r7,#0xff
                                    916 ;	./src/N76_I2C.c:212: if (xRamRead(XRAM_I2C_RX_IDX) < xRamRead(XRAM_I2C_RX_LEN))
      000557 90 02 BE         [24]  917 	mov	dptr,#0x02be
      00055A C0 07            [24]  918 	push	ar7
      00055C 12 07 14         [24]  919 	lcall	_xRamRead
      00055F AE 82            [24]  920 	mov	r6,dpl
      000561 90 02 BF         [24]  921 	mov	dptr,#0x02bf
      000564 C0 06            [24]  922 	push	ar6
      000566 12 07 14         [24]  923 	lcall	_xRamRead
      000569 AD 82            [24]  924 	mov	r5,dpl
      00056B D0 06            [24]  925 	pop	ar6
      00056D D0 07            [24]  926 	pop	ar7
      00056F C3               [12]  927 	clr	c
      000570 EE               [12]  928 	mov	a,r6
      000571 9D               [12]  929 	subb	a,r5
      000572 50 25            [24]  930 	jnc	00102$
                                    931 ;	./src/N76_I2C.c:215: value = xRamRead(xRamRead(XRAM_I2C_RX_IDX)+XRAM_I2C_RX_BUFF);
      000574 90 02 BE         [24]  932 	mov	dptr,#0x02be
      000577 12 07 14         [24]  933 	lcall	_xRamRead
      00057A AE 82            [24]  934 	mov	r6,dpl
      00057C 7D 00            [12]  935 	mov	r5,#0x00
      00057E 74 E0            [12]  936 	mov	a,#0xe0
      000580 2E               [12]  937 	add	a,r6
      000581 FE               [12]  938 	mov	r6,a
      000582 74 02            [12]  939 	mov	a,#0x02
      000584 3D               [12]  940 	addc	a,r5
      000585 FD               [12]  941 	mov	r5,a
      000586 8E 82            [24]  942 	mov	dpl,r6
      000588 8D 83            [24]  943 	mov	dph,r5
      00058A 12 07 14         [24]  944 	lcall	_xRamRead
      00058D AF 82            [24]  945 	mov	r7,dpl
                                    946 ;	./src/N76_I2C.c:216: xRamInc(XRAM_I2C_RX_IDX);
      00058F 90 02 BE         [24]  947 	mov	dptr,#0x02be
      000592 C0 07            [24]  948 	push	ar7
      000594 12 07 1C         [24]  949 	lcall	_xRamInc
      000597 D0 07            [24]  950 	pop	ar7
      000599                        951 00102$:
                                    952 ;	./src/N76_I2C.c:218: return value;
      000599 8F 82            [24]  953 	mov	dpl,r7
                                    954 ;	./src/N76_I2C.c:219: }
      00059B 22               [24]  955 	ret
                                    956 ;------------------------------------------------------------
                                    957 ;Allocation info for local variables in function 'I2C_available'
                                    958 ;------------------------------------------------------------
                                    959 ;	./src/N76_I2C.c:221: int16_t I2C_available()
                                    960 ;	-----------------------------------------
                                    961 ;	 function I2C_available
                                    962 ;	-----------------------------------------
      00059C                        963 _I2C_available:
                                    964 ;	./src/N76_I2C.c:223: return xRamRead(XRAM_I2C_RX_LEN) - xRamRead(XRAM_I2C_RX_IDX);
      00059C 90 02 BF         [24]  965 	mov	dptr,#0x02bf
      00059F 12 07 14         [24]  966 	lcall	_xRamRead
      0005A2 AF 82            [24]  967 	mov	r7,dpl
      0005A4 7E 00            [12]  968 	mov	r6,#0x00
      0005A6 90 02 BE         [24]  969 	mov	dptr,#0x02be
      0005A9 C0 07            [24]  970 	push	ar7
      0005AB C0 06            [24]  971 	push	ar6
      0005AD 12 07 14         [24]  972 	lcall	_xRamRead
      0005B0 AD 82            [24]  973 	mov	r5,dpl
      0005B2 D0 06            [24]  974 	pop	ar6
      0005B4 D0 07            [24]  975 	pop	ar7
      0005B6 7C 00            [12]  976 	mov	r4,#0x00
      0005B8 EF               [12]  977 	mov	a,r7
      0005B9 C3               [12]  978 	clr	c
      0005BA 9D               [12]  979 	subb	a,r5
      0005BB FF               [12]  980 	mov	r7,a
      0005BC EE               [12]  981 	mov	a,r6
      0005BD 9C               [12]  982 	subb	a,r4
                                    983 ;	./src/N76_I2C.c:224: }
      0005BE 8F 82            [24]  984 	mov	dpl,r7
      0005C0 F5 83            [12]  985 	mov	dph,a
      0005C2 22               [24]  986 	ret
                                    987 	.area CSEG    (CODE)
                                    988 	.area CONST   (CODE)
                                    989 	.area XINIT   (CODE)
                                    990 	.area CABS    (ABS,CODE)
